// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MODELO DE UTILIZADOR E ASSINATURA
model User {
  id                 String    @id @default(cuid())
  name               String    // 'name' agora é obrigatório
  email              String    @unique
  password           String?   // Campo para a senha (opcional)
  stripeCustomerId   String?   @unique
  subscription       Subscription?
  catalogs           Catalog[]
  PasswordResetToken PasswordResetToken? // Relação para o token de reset
  onboardingComplete Boolean   @default(false) // ✅ Flag de onboarding
}

model Subscription {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
  plan   String
  status String
}

// MODELO DO CATÁLOGO E SEUS AGREGADOS
model Catalog {
  id         String     @id @default(cuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  products   Product[]
  categories Category[]
}

model Category {
  id        String    @id @default(cuid())
  name      String
  catalogId String
  catalog   Catalog   @relation(fields: [catalogId], references: [id])
  products  Product[]

  @@unique([name, catalogId])
}

model Product {
  id               String         @id @default(cuid())
  slug             String         @unique
  name             String
  shortDescription String
  description      String
  images           String[]
  priceInfo        String
  isFeatured       Boolean        @default(false)
  categoryId       String
  category         Category       @relation(fields: [categoryId], references: [id])
  catalogId        String
  catalog          Catalog        @relation(fields: [catalogId], references: [id])
  specifications   Specification?
  priceTable       PriceTier[]
}

model Specification {
  id         String  @id @default(cuid())
  material   String
  capacidade String
  dimensoes  String
  productId  String  @unique
  product    Product @relation(fields: [productId], references: [id])
}

model PriceTier {
  id        String  @id @default(cuid())
  quantity  String
  price     Float
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

// Modelo para gerir os tokens de redefinição de senha
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  userId    String   @unique // Um utilizador só pode ter um token ativo
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}